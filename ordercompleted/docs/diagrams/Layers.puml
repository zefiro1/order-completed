@startuml
!define RECTANGLE(x, y, label) rectangle label as label <<Component>>

skinparam componentStyle rectangle
skinparam monochrome true

package "Core Layer" {
  package "Domain" {
        package "Model" {
            class Order {
              +id: String
              +status: String
              +complete(): void
            }
        }
        package "Event" {
            class OrderCompletedEvent {
             +orderId: String
            }
        }
         package "Service" {
            class OrderDomainService {
             +completeOrder(Order): void
            }
        }
  }

  package "Ports" {
    package "Primary Ports" {
      interface CompleteOrderUseCase {
        +completeOrder(orderId: String): void
      }
      interface GetOrderUseCase {
        +getOrderStatus(orderId: String): String
      }
    }
    package "Secondary Ports" {
      interface OrderRepository {
        +findById(id: String): Order
        +save(order: Order): void
      }
      interface OrderEventPublisher {
        +publish(event: OrderCompletedEvent): void
      }
      interface OrderEventConsumerPort {
        +consumeOrderCompletedEvent(): void
      }
    }
  }
}

package "Application Layer" {
    package "Services" {
        class CompleteOrderService {
          +completeOrder(orderId: String): void
        }
        class GetOrderService {
          +getOrderStatus(orderId: String): String
        }
        CompleteOrderService --|> CompleteOrderUseCase
        GetOrderService --|> GetOrderUseCase
    }

    package "Dispatcher" {
        class CommandQueryBus {
            +dispatchCommand(command: Command, handler: CommandHandler): void
            +dispatchQuery(query: Query, handler: QueryHandler): void
        }
    }

    package "Handlers" {
        package "Command" {
            interface CommandHandler<T> {
              +handle(command: T): void
            }
            class CompleteOrderCommand {
              +orderId: String
            }
            class CompleteOrderCommandHandler {
              +handle(command: CompleteOrderCommand): void
            }
            CompleteOrderCommandHandler --|> CommandHandler
            CompleteOrderService ..> CompleteOrderCommand : <<creates>>
        }
        package "Query" {
            interface QueryHandler<R> {
              +handle(query: Object): R
            }
            class GetOrderQuery {
              +orderId: String
            }
            class GetOrderQueryHandler {
              +handle(query: GetOrderQuery): String
            }
            GetOrderQueryHandler --|> QueryHandler
            GetOrderService ..> GetOrderQuery : <<creates>>
        }
    }
}

package "Infrastructure Layer" {
  package "Primary Adapters" {
    class OrderController {
      +completeOrder(orderId: String): void
      +getOrderStatus(orderId: String): String
    }
  }
  package "Secondary Adapters" {
    class InMemoryOrderRepository {
      +findById(id: String): Order
      +save(order: Order): void
    }
    class ConsoleOrderEventPublisher {
      +publish(event: OrderCompletedEvent): void
    }
    class OrderEventConsumer {
      +consumeOrderCompletedEvent(): void
    }
    OrderEventConsumer --|> OrderEventConsumerPort
  }
  class Main {
   +main(String[] args): void
  }
}

' Relationships
OrderController --> CompleteOrderService : <<uses>>
OrderController --> GetOrderService : <<uses>>

CompleteOrderService --> CommandQueryBus : <<uses>>
CompleteOrderService --> OrderRepository : <<uses>>
CompleteOrderService --> OrderEventPublisher : <<uses>>
CompleteOrderService --> OrderDomainService : <<uses>>
CompleteOrderService --> CompleteOrderCommandHandler : <<dispatches>>

GetOrderService --> CommandQueryBus : <<uses>>
GetOrderService --> OrderRepository : <<uses>>
GetOrderService --> GetOrderQueryHandler : <<dispatches>>

CommandQueryBus ..> CompleteOrderCommandHandler : <<dispatches>>
CommandQueryBus ..> GetOrderQueryHandler : <<dispatches>>

CompleteOrderCommandHandler ..> OrderRepository : <<uses>>
CompleteOrderCommandHandler ..> OrderDomainService : <<uses>>
CompleteOrderCommandHandler ..> OrderEventPublisher : <<uses>>

GetOrderQueryHandler ..> OrderRepository : <<uses>>

CompleteOrderService ..> CompleteOrderCommand : <<creates>>
GetOrderService ..> GetOrderQuery : <<creates>>

InMemoryOrderRepository --|> OrderRepository
ConsoleOrderEventPublisher --|> OrderEventPublisher
OrderEventConsumer ..> CompleteOrderService : <<uses>>

Order ..> OrderCompletedEvent : <<triggers>>
OrderDomainService ..> Order : <<uses>>

@enduml
