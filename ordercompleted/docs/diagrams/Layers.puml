@startuml
!define RECTANGLE(x, y, label) rectangle label as label <<Component>>

skinparam componentStyle rectangle
skinparam monochrome true

package "Core Layer" {
  package "Domain" {
        package "Model"{
            class Order {
              +id: String
              +status: String
              +complete(): void
            }
        }
        package "Event"{
            class OrderCompletedEvent {
             +orderId: String
            }
        }
         package "Service"{
            class OrderDomainService {
             +completeOrder(Order): void
            }
        }

  }

  package "Ports" {
    package "Primary Ports" {
      interface CompleteOrderUseCase {
        +completeOrder(orderId: String): void
      }
      interface GetOrderUseCase {
        +getOrderStatus(orderId: String): String
      }
    }
    package "Secondary Ports" {
      interface OrderRepository {
        +findById(id: String): Order
        +save(order: Order): void
      }
      interface OrderEventPublisher {
        +publish(event: OrderCompletedEvent): void
      }
    }
  }
}

package "Application Layer" {
    package "Services" {
     class CompleteOrderService {
        +completeOrder(orderId: String): void
     }
    class GetOrderService {
     +getOrderStatus(orderId: String): String
    }
   }
}

package "Infrastructure Layer" {
  package "Primary Adapters" {
    class OrderController {
      +completeOrder(orderId: String): void
      +getOrderStatus(orderId: String): String
    }
  }
  package "Secondary Adapters" {
    class InMemoryOrderRepository {
      +findById(id: String): Order
      +save(order: Order): void
    }
    class ConsoleOrderEventPublisher {
      +publish(event: OrderCompletedEvent): void
    }
  }
  class Main{
   +main(String[] args): void
  }
}

' Relationships
OrderController --> CompleteOrderUseCase
OrderController --> GetOrderUseCase

CompleteOrderService ..> OrderRepository : <<uses>>
CompleteOrderService ..> OrderEventPublisher : <<publishes>>
CompleteOrderService ..> OrderDomainService : <<uses>>

GetOrderService ..> OrderRepository : <<uses>>

InMemoryOrderRepository --|> OrderRepository
ConsoleOrderEventPublisher --|> OrderEventPublisher

CompleteOrderService --|> CompleteOrderUseCase
GetOrderService --|> GetOrderUseCase


Order ..> OrderCompletedEvent : <<triggers>>
OrderDomainService ..> Order : <<uses>>

@enduml
