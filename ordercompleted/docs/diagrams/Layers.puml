@startuml
!define RECTANGLE(x, y, label) rectangle label as label <<Component>>

skinparam componentStyle rectangle
skinparam monochrome true

package "Core Layer" {
  package "Domain" {
    class Order {
      +id: String
      +status: String
      +complete(): void
    }
    class OrderCompletedEvent {
      +orderId: String
    }
    class OrderDomainService {
      +completeOrder(Order): void
    }
  }

  package "Ports" {
    package "Primary Ports" {
      interface CompleteOrderUseCase {
        +completeOrder(orderId: String): void
      }
      interface GetOrderUseCase {
        +getOrderStatus(orderId: String): String
      }
    }
    package "Secondary Ports" {
      interface OrderRepository {
        +findById(id: String): Order
        +save(order: Order): void
      }
      interface OrderEventPublisher {
        +publish(event: OrderCompletedEvent): void
      }
    }
  }
}

package "Application Layer" {
  class CompleteOrderService {
    +completeOrder(orderId: String): void
  }
  class GetOrderService {
    +getOrderStatus(orderId: String): String
  }
}

package "Infrastructure Layer" {
  package "Primary Adapters" {
    class OrderController {
      +completeOrder(orderId: String): void
      +getOrderStatus(orderId: String): String
    }
  }
  package "Secondary Adapters" {
    class InMemoryOrderRepository {
      +findById(id: String): Order
      +save(order: Order): void
    }
    class ConsoleOrderEventPublisher {
      +publish(event: OrderCompletedEvent): void
    }
  }
}

' Relationships
OrderController --> CompleteOrderUseCase
OrderController --> GetOrderUseCase

CompleteOrderService ..> OrderRepository : <<uses>>
CompleteOrderService ..> OrderEventPublisher : <<publishes>>
CompleteOrderService ..> OrderDomainService : <<uses>>

GetOrderService ..> OrderRepository : <<uses>>

InMemoryOrderRepository --|> OrderRepository
ConsoleOrderEventPublisher --|> OrderEventPublisher

Order ..> OrderCompletedEvent : <<triggers>>
OrderDomainService ..> Order : <<uses>>

@enduml
